{"version":3,"file":"static/js/503.17d5808c.chunk.js","mappings":"uKAGaA,E,QAAiBC,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,0DAG3BC,EAAAA,IAAY,Q,SCHZC,EAAoB,SAAHC,GAGH,IAFvBC,EAAID,EAAJC,KACAC,EAAOF,EAAPE,QAEA,OAAKA,EAAQC,QAITC,EAAAA,EAAAA,KAACV,EAAc,CAAAW,UACXD,EAAAA,EAAAA,KAAA,UAAQH,KAAMA,EAAMK,GAAIL,EAAKI,SAErBH,EAAQK,KAAI,SAACC,GAAc,OACvBJ,EAAAA,EAAAA,KAAA,UAAQK,MAAOD,EAAOH,SAAEG,GAAgB,QAPjD,IAaf,C,oKClBaE,EAAuBf,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,uCACpCC,EAAAA,GAAW,YAAc,cAItBa,EAAchB,EAAAA,GAAAA,IAAUiB,IAAAA,GAAAf,EAAAA,EAAAA,GAAA,uD,6BC4BrC,EA7BgC,WAC5B,IACAgB,ECIoC,SAACC,GACrC,IAAAC,GAAgDC,EAAAA,EAAAA,YAA6BC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAtEI,EAAgBF,EAAA,GAAEG,EAAmBH,EAAA,GACtCI,EAAmC,eAAArB,GAAAsB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,GACrBC,EAAAA,EAAAA,IAAgBjB,GAAU,KAAD,GAAtCY,EAAIE,EAAAI,OAENZ,EAAoBM,GACvB,wBAAAE,EAAAK,OAAA,GAAAR,EAAA,KACJ,kBALwC,OAAAzB,EAAAkC,MAAA,KAAAC,UAAA,KAYzC,OANAC,EAAAA,EAAAA,YAAU,WACFtB,GACAO,GAER,GAAG,CAACP,IAEG,CAACK,EACZ,CDnB+BkB,EADFC,EAAAA,EAAAA,MAAjBC,cAC4D,IAA7DpB,GAAgED,EAAAA,EAAAA,GAAAL,EAAA,GAAhD,GACvB,IAAKM,EACD,OAAO,KAIX,OACIqB,EAAAA,EAAAA,MAAC9B,EAAoB,CAAAL,SAAA,EACjBmC,EAAAA,EAAAA,MAAA,OAAAnC,SAAA,EACID,EAAAA,EAAAA,KAACqC,EAAAA,GAAK,CAAApC,SACe,OAAhBc,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkBlB,QAEvBG,EAAAA,EAAAA,KAACsC,EAAAA,GAAW,CAAArC,SACS,OAAhBc,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkBwB,eAEvBvC,EAAAA,EAAAA,KAACL,EAAAA,EAAiB,CAACE,KAAsB,OAAhBkB,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkBlB,KAAMC,QAVlC,WAAH,IAAA0C,EAAA,OAAyB,OAAhBzB,QAAgB,IAAhBA,GAA4B,QAAZyB,EAAhBzB,EAAkB0B,kBAAU,IAAAD,OAAZ,EAAhBA,EAA8BrC,KAAI,SAAAO,GAAQ,OAAIA,EAAe,IAAC,GAAE,CAU3BgC,SAGzDhD,EAAAA,KACDM,EAAAA,EAAAA,KAACO,EAAW,CAAAN,UACRD,EAAAA,EAAAA,KAAA,OAAK2C,IAAqB,OAAhB5B,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkB6B,YAKhD,C","sources":["components/common/dropdown/assets/style.tsx","components/common/dropdown/index.tsx","components/highlightsView/assets/style.tsx","components/highlightsView/index.tsx","shared/hooks/useFetchHighlightDetails.tsx"],"sourcesContent":["import { isMobile } from \"react-device-detect\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const DropdownLayout = styled.div`\r\nmargin-top: 16px;\r\nselect {\r\n    width: ${isMobile && '100%'};\r\n}\r\n`;","import { IDropdownComponent } from \"./@types\";\r\nimport { DropdownLayout } from \"./assets/style\";\r\n\r\nexport const DropdownComponent = ({\r\n    name,\r\n    options,\r\n}: IDropdownComponent) => {\r\n    if (!options.length) {\r\n        return null;\r\n    }\r\n    return (\r\n        <DropdownLayout>\r\n            <select name={name} id={name}>\r\n                {\r\n                    options.map((option: string) => (\r\n                        <option value={option}>{option}</option>\r\n                    ))\r\n                }\r\n            </select>\r\n        </DropdownLayout>\r\n    )\r\n};","import { isMobile } from \"react-device-detect\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const HighlightsViewLayout = styled.div`\r\nmargin: ${isMobile ? '40px 16px' : '40px 188px'};\r\ndisplay: flex;\r\n`;\r\n\r\nexport const ImageLayout = styled.div`\r\nwidth: 40%;\r\nimg {\r\n    max-width: 100%;\r\n}\r\n`;","import { useParams } from \"react-router-dom\";\r\nimport { useFetchHighlightDetails } from \"../../shared/hooks/useFetchHighlightDetails\";\r\nimport { HighlightsViewLayout, ImageLayout } from \"./assets/style\";\r\nimport { Title, Description } from \"../common/highlightsCard/assets/style\";\r\nimport { isMobile } from \"react-device-detect\";\r\nimport { DropdownComponent } from \"../common/dropdown\";\r\n\r\nconst HighlightsViewComponent = () => {\r\n    const { activityType } = useParams();\r\n    const [highlightDetails] = useFetchHighlightDetails(activityType || '');\r\n    if (!highlightDetails) {\r\n        return null;\r\n    }\r\n\r\n    const getDropdownOptions = () => highlightDetails?.activities?.map(activity => activity['name']);\r\n    return (\r\n        <HighlightsViewLayout>\r\n            <div>\r\n                <Title>\r\n                    {highlightDetails?.name}\r\n                </Title>\r\n                <Description>\r\n                    {highlightDetails?.description}\r\n                </Description>\r\n                <DropdownComponent name={highlightDetails?.name} options={getDropdownOptions()} />\r\n            </div>\r\n            {\r\n                !isMobile &&\r\n                <ImageLayout>\r\n                    <img src={highlightDetails?.image} />\r\n                </ImageLayout>\r\n            }\r\n        </HighlightsViewLayout>\r\n    );\r\n};\r\n\r\nexport default HighlightsViewComponent;","import { useEffect, useState } from \"react\";\r\nimport { fetchActivities } from \"../../service\";\r\n\r\n\r\nexport interface IHighlightActivity {\r\n    name: string\r\n}\r\nexport interface IHighlightDetails {\r\n    name: string,\r\n    description: string,\r\n    image: string,\r\n    activities: IHighlightActivity[],\r\n}\r\nexport const useFetchHighlightDetails = (activity: string) => {\r\n    const [highlightDetails, setHighlightDetails] = useState<IHighlightDetails>();\r\n    const triggerFetchHighlightDetailsAPICall = async () => {\r\n        const resp = await fetchActivities(activity);\r\n        if (resp) {\r\n            setHighlightDetails(resp);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        if (activity) {\r\n            triggerFetchHighlightDetailsAPICall();\r\n        }\r\n    }, [activity]);\r\n\r\n    return [highlightDetails];\r\n};"],"names":["DropdownLayout","styled","_templateObject","_taggedTemplateLiteral","isMobile","DropdownComponent","_ref","name","options","length","_jsx","children","id","map","option","value","HighlightsViewLayout","ImageLayout","_templateObject2","_useFetchHighlightDet","activity","_useState","useState","_useState2","_slicedToArray","highlightDetails","setHighlightDetails","triggerFetchHighlightDetailsAPICall","_asyncToGenerator","_regeneratorRuntime","mark","_callee","resp","wrap","_context","prev","next","fetchActivities","sent","stop","apply","arguments","useEffect","useFetchHighlightDetails","useParams","activityType","_jsxs","Title","Description","description","_highlightDetails$act","activities","getDropdownOptions","src","image"],"sourceRoot":""}